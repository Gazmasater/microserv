services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microserv-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microserv-network

  migrate:
    image: golang:1.22
    depends_on:
      - postgres
    entrypoint: >
      sh -c "
        apt-get update && 
        apt-get install -y iproute2 netcat && 
        echo 'Waiting for Postgres to be ready...' && 
        while ! ss -tuln | grep -q ':5432'; do
          sleep 1;
        done; 
        echo 'Postgres is ready, running migrations' && 
        go install github.com/pressly/goose/v3/cmd/goose@latest && 
        goose -dir=/app/internal/db/migrations postgres \"user=postgres password=qwert dbname=microserv host=postgres sslmode=disable\" up;"
    volumes:
      - ./:/app
    networks:
      - microserv-network

  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: microserv
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qwert
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init_postgres.sh:/docker-entrypoint-initdb.d/init_postgres.sh
    networks:
      - microserv-network

  kafka-connect:
    image: debezium/connect:latest
    container_name: kafka-connect
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_LOG4J_LOGGERS: "org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR"
      PLUGIN_PATH: /kafka/connect
    volumes:
      - ./connect-plugins:/kafka/connect
      - ./log4j.properties:/kafka/connect/log4j.properties
      - ./install-connector.sh:/usr/share/confluent/docker/install-connector.sh
      - ./postgres-connector2.json:/usr/share/confluent/docker/postgres-connector2.json
    networks:
      - microserv-network

  app:
    build:
      context: .
      dockerfile: Dockerfile.Go
    env_file:
      - .env
    environment:

      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: qwert
      DB_NAME: microserv
      KAFKA_BROKER: ${KAFKA_BROKER}
      LOG_LEVEL: ${LOG_LEVEL}

    ports:
      - "8080:8080" # Прокидываем порт 8080 на 8080 внутри контейнера
    depends_on:
      - kafka
      - postgres
    networks:
      - microserv-network

  swagger-ui:
    image: swaggerapi/swagger-ui # Используем официальный образ Swagger UI
    ports:
      - "8081:8080"
    volumes:
      - ./docs:/usr/share/nginx/html # Монтируем локальную папку с документом
    depends_on:
      - migrate

    networks:
      - microserv-network

volumes:
  pgdata:


networks:
  microserv-network:
    driver: bridge
