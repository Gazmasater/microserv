version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microserv-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microserv-network

  postgres:
    build:
      context: .
      dockerfile: Dockerfile.Postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qwert
      POSTGRES_DB: microserv
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    networks:
      - microserv-network

  kafka-connect:
    image: debezium/connect:1.7
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_LOG4J_LOGGERS: "org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR"
      PLUGIN_PATH: /kafka/connect
    volumes:
      - ./connect-plugins:/kafka/connect
      - ./log4j.properties:/kafka/connect/log4j.properties
    networks:
      - microserv-network

  app:
    build:
      context: .
      dockerfile: Dockerfile.Go
    env_file:
      - .env
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      KAFKA_BROKER: ${KAFKA_BROKER}
      LOG_LEVEL: ${LOG_LEVEL}
    expose:
      - "8080"
    networks:
      - microserv-network

  nginx:
    image: nginx:latest
    ports:
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./docs:/docs
    depends_on:
      - app
      - swagger
    networks:
      - microserv-network

  swagger:
    image: swaggerapi/swagger-ui
    container_name: swagger
    restart: always
    environment:
      - SWAGGER_JSON=/docs/swagger.json
      - DOC_EXPANSION=none
    networks:
      - microserv-network
    volumes:
      - ./docs:/docs

volumes:
  postgres_data:


networks:
  microserv-network:
    driver: bridge
